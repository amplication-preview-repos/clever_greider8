/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChangeRequest } from "./ChangeRequest";
import { ChangeRequestCountArgs } from "./ChangeRequestCountArgs";
import { ChangeRequestFindManyArgs } from "./ChangeRequestFindManyArgs";
import { ChangeRequestFindUniqueArgs } from "./ChangeRequestFindUniqueArgs";
import { CreateChangeRequestArgs } from "./CreateChangeRequestArgs";
import { UpdateChangeRequestArgs } from "./UpdateChangeRequestArgs";
import { DeleteChangeRequestArgs } from "./DeleteChangeRequestArgs";
import { ChangeRequestDto } from "../../approval/ChangeRequestDto";
import { ChangeRequestService } from "../changeRequest.service";
@graphql.Resolver(() => ChangeRequest)
export class ChangeRequestResolverBase {
  constructor(protected readonly service: ChangeRequestService) {}

  async _changeRequestsMeta(
    @graphql.Args() args: ChangeRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChangeRequest])
  async changeRequests(
    @graphql.Args() args: ChangeRequestFindManyArgs
  ): Promise<ChangeRequest[]> {
    return this.service.changeRequests(args);
  }

  @graphql.Query(() => ChangeRequest, { nullable: true })
  async changeRequest(
    @graphql.Args() args: ChangeRequestFindUniqueArgs
  ): Promise<ChangeRequest | null> {
    const result = await this.service.changeRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChangeRequest)
  async createChangeRequest(
    @graphql.Args() args: CreateChangeRequestArgs
  ): Promise<ChangeRequest> {
    return await this.service.createChangeRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChangeRequest)
  async updateChangeRequest(
    @graphql.Args() args: UpdateChangeRequestArgs
  ): Promise<ChangeRequest | null> {
    try {
      return await this.service.updateChangeRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChangeRequest)
  async deleteChangeRequest(
    @graphql.Args() args: DeleteChangeRequestArgs
  ): Promise<ChangeRequest | null> {
    try {
      return await this.service.deleteChangeRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async ApproveChangeRequest(
    @graphql.Args()
    args: ChangeRequestDto
  ): Promise<string> {
    return this.service.ApproveChangeRequest(args);
  }
}
