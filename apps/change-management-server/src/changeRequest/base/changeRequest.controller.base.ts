/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChangeRequestService } from "../changeRequest.service";
import { ChangeRequestCreateInput } from "./ChangeRequestCreateInput";
import { ChangeRequest } from "./ChangeRequest";
import { ChangeRequestFindManyArgs } from "./ChangeRequestFindManyArgs";
import { ChangeRequestWhereUniqueInput } from "./ChangeRequestWhereUniqueInput";
import { ChangeRequestUpdateInput } from "./ChangeRequestUpdateInput";
import { ChangeRequestDto } from "../../approval/ChangeRequestDto";

export class ChangeRequestControllerBase {
  constructor(protected readonly service: ChangeRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChangeRequest })
  async createChangeRequest(
    @common.Body() data: ChangeRequestCreateInput
  ): Promise<ChangeRequest> {
    return await this.service.createChangeRequest({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChangeRequest] })
  @ApiNestedQuery(ChangeRequestFindManyArgs)
  async changeRequests(
    @common.Req() request: Request
  ): Promise<ChangeRequest[]> {
    const args = plainToClass(ChangeRequestFindManyArgs, request.query);
    return this.service.changeRequests({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChangeRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async changeRequest(
    @common.Param() params: ChangeRequestWhereUniqueInput
  ): Promise<ChangeRequest | null> {
    const result = await this.service.changeRequest({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChangeRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChangeRequest(
    @common.Param() params: ChangeRequestWhereUniqueInput,
    @common.Body() data: ChangeRequestUpdateInput
  ): Promise<ChangeRequest | null> {
    try {
      return await this.service.updateChangeRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChangeRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChangeRequest(
    @common.Param() params: ChangeRequestWhereUniqueInput
  ): Promise<ChangeRequest | null> {
    try {
      return await this.service.deleteChangeRequest({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/approveChangeRequest")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ApproveChangeRequest(
    @common.Body()
    body: ChangeRequestDto
  ): Promise<string> {
    return this.service.ApproveChangeRequest(body);
  }
}
